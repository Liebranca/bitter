#**************************************#
# ES-AVTOMAT                           #
#                                      #
# > build helper for ESPECTRO          #
#   ---     ---     ---     ---     ---#
# LIBRE SOFTWARE                       #
#                                      #
# > Licensed under GNU GPL3            #
# > be a bro and inherit               #
#   ---     ---     ---     ---     ---#
# CONTRIBUTORS                         #
#                                      #
# > lyeb,                              #
#                                      #
#**************************************#

import os, datetime;
today = datetime.datetime.now();

KVR_DEBUG=0xFFFF;

#   ---     ---     ---     ---     ---

def mknot():
  pstr=(
  "//**************************\n"\
  "// LIBRE BOILERPASTE       *\n"\
  "// GENERATED BY ES-AVTOMAT *\n"\
  "//                         *\n"\
  "// LICENSED UNDER GNU GPL3 *\n"\
  "// BE A BRO AND INHERIT    *\n"\
  "//                         *\n"\
 f"// COPYLEFT CIXXPAKK {today.year}"+(' '*2)+"*\n"\
  "//**************************\n"

  );return pstr;

if __name__=="__main__":

  pstr=mknot();

#   ---     ---     ---     ---     ---

  print("\n>AVTOMAT"); pwd=os.getcwd();
  if not os.path.exists(pwd+"/calout.h"):
    print("->generated calout.h");
    import mkcalout; mkcalout.gen(pstr, pwd);

  for fold in ["KVRNEL","GRIM", "MAMMOTH", "SIN", "CHASM", "UTILS", "SHB7"]:

    dpath=os.path.abspath(pwd+f"/../../trashcan/{fold}");
    d = dpath.split("\\"); r = d[0]; 
    for sp in d[1:]:
      r = r + f"\\{sp}";
      if not os.path.exists(r): os.mkdir(r);

    if(fold=="UTILS"):
      lpatch=os.path.abspath(f"{pwd}/../../trashcan/{fold}/LIBS");
      if(not os.path.exists(lpatch)):
        print(f"->Made {lpatch} can");
        os.mkdir(lpatch);

    if not os.path.exists(dpath+"/MKLOG"):
      print(f"->generated {fold} can");
      with open(dpath+"/MKLOG", "w+") as mkflags:
        mkflags.write(f"-D KVR_DEBUG={KVR_DEBUG}");

  print("\n Ready\n");

#   ---     ---     ---     ---     ---