/*/*//*//*//*//*//*//*//*//*//*//*//*//*//*/*/
/*    ES_BUILTINS                           *
*                                           *
*     -copy-pasted into coretypes           *
*                                           */
// *   ---     ---     ---     ---     ---  *
/*    LIBRE SOFTWARE                        *
*                                           *
*     Licenced under GNU GPL3               *
*     be a bro and inherit                  *
*                                           */
// *   ---     ---     ---     ---     ---  *
/* CONTRIBUTORS                             *
*     lyeb,                                 *
*                                           */
/*/*//*//*//*//*//*//*//*//*//*//*//*//*//*/*/

//   ---     ---     ---     ---     ---

#define JMPCON_FMOVCUR 0x01
#define JMPCON_FMOVCHR 0x02

void JMPCON(void* buff)                     {

    ustr8  co    = *((ustr8*) buff);

                                            // clamp to {0, screen size in chars}
    uint   raw_x = clampui                  (co.x-1, 0, kvr.nchars_x                     );
    uint   raw_y = clampui                  (co.y-1, 0, kvr.nchars_y                     );

                                            // multiply scale by number of chars
    float  x     =                          -1 + (kvr.curt[0] * raw_x                    );
    float  y     =                           1 - (kvr.curt[2] * raw_y                    );

//   ---     ---     ---     ---     ---

    if(co.z & JMPCON_FMOVCUR) {             // assign values to __cursor__ position
        kvr.curt[3] = y;
        kvr.curt[1] = x;

    };

    if(co.z & JMPCON_FMOVCHR) {             // assign values to __next_char__ position
        kvr.chrt[3] = y;
        kvr.chrt[1] = x;

    };

                                            // make debug call
    CALOUT                                  (P, "\e[67;0HJumped to [%u,%u]", raw_x, raw_y); };

//   ---     ---     ---     ---     ---

void GBPE(void* buff) {
    ustr8 data = *((ustr8*) buff);
    CALOUT(P, "\e[67;0HYou gb 0x%08X", data.F);

};

void WTPE(void* buff) {
    CALOUT(P, "\e[67;0HYou wt!");

};

//   ---     ---     ---     ---     ---